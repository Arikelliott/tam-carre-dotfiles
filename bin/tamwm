#!/bin/sh
# ==== TAMWM ==================================================================
# Multi-purpose window-managing script.
# Dependencies: wmctrl, xdotool
# Features:
#    - Launch_app applications with preset geometry
#    - Workaround for closing ARGB windows with no flicker using Picom fade-out.
#    - Apply preset layouts on workspace (desktop) change

usage() {
    this_script=$(basename "$0")
    echo "Usage: $this_script [OPTION] [ARG]
-l        Launch_app and position a program (args: irc, ncmpcpp, ranger, vim,
          vivaldi, spare, 3terms)
-x        Workaround that closes a window with no flicker using Picom
-d        Desktop manager (args: dprev, dnext, dnum n)
-s        Positions window (args: 1, 2, 3 etc)
-i        Switch active window position with another one mouse-selected"
}

main() {
    while getopts l:xd:s:i opt; do
        case "$opt" in
        l) instr="launch_app";;
        x) instr="close_window_workaround";;
        d) instr="manage_dtops";;
        s) instr="move_window_to_preset";;
        i) instr="invert_windows";;
        *) instr="usage";;
        esac
    done
    shift
    check_prereqs &&
    $instr "$@"
}


# ===== Main functions ========================================================
# =============================================================================

launch_app() {
    set -x
    tml="gnome-terminal --window-with-profile noel --geometry"
    tml2="gnome-terminal --window-with-profile noel-notrans --geometry"
    tml_cls="Gnome-terminal"
    pre_cmds()     { :; }
    after_cmds()   { :; }

    case $1 in

    irc|weechat)
        cls=$tml_cls
        new_cls="irc"
        cmd() { $tml 79x22+1950+63 -- sh -c "mosh takat.su -- tmux a"; }
        ;;

    ncmpcpp|music)
        cls=$tml_cls
        new_cls="ncmpcpp"
        cmd() { $tml 79x13+1950+471 -- sh -c "ncmpcpp; clear; exec zsh"; }
        after_cmds() { openbox_actions to_bottom; }
        ;;

    ranger|r|kranger|fm)
        cls=$tml_cls
        new_cls="ranger"
        cmd() { $tml 79x18+1950+735 -- sh -c "r /media/kokone/anime; exec zsh"; }
        pre_cmds() { mount | grep takat &&
                     sshfs alpha@takat.su:/home/alpha/ /media/sensei/takatsu & }
        ;;

    3terms)
        cmd() { launch_app irc; launch_app ncmpcpp; launch_app ranger; }
        ;;

    spare)
        cls=$tml_cls
        new_cls="spare"
        read -r irc_id </tmp/tamwm/WID_irc
        cmd() { $tml 79x22+1950+63; }
        pre_cmds() { xdotool windowminimize "$irc_id"; }
        ;;

    vim_one|vim1|nvim1|code1)
        cls=$tml_cls
        new_cls="vim_one"
        cmd() { $tml2 87x60+37+63 -- sh -c \
                "NVIM_LISTEN_ADDRESS=/tmp/nvimsocket \
                vim -c 'OpenSession small'; exec zsh"; }
        after_cmds() { wmctrl -vxr $new_cls -t 0; };;

    vim2|nvim2|code2)
        cls=$tml_cls
        new_cls="vim_two"
        cmd() { $tml2 175x60+37+63 -- sh -c \
                "NVIM_LISTEN_ADDRESS=/tmp/nvimsocket2 \
                vim -c 'OpenSession large'; exec zsh"; }
        after_cmds() { wmctrl -vxr $new_cls -t 1; };;

    vim|nvim|code)
        cmd() { launch_app vim2; launch_app vim1; };;

    vivaldi|web|browser| main )
        cls="Vivaldi-stable"
        new_cls="vivaldi"
        cmd() { vivaldi & }
        after_cmds() { move_window_to_preset 2; };;

    *)
        printf '%s\n' "Available -l arguments:" \
            "irc ncmpcpp ranger vivaldi vim1 vim2 spare 3terms"; exit 1 ;;

    esac

    existing_instances=$(count_cls $cls)

    pre_cmds >/dev/null 2>&1
    cmd >/dev/null 2>&1

    until [ "$(count_cls $cls)" -gt "$existing_instances" ]; do sleep .1; done

    window_id=$(wmctrl -lx | awk -v c=$cls '$3 ~ c {last=$1} END {print last}')

    if [ -n "$new_cls" ]; then
        xdotool set_window --class "$new_cls" "$window_id"
        cls=$new_cls
    fi

    xdotool windowfocus "$window_id"
    after_cmds
    mkdir -p /tmp/tamwm
    echo "$window_id" > /tmp/tamwm/WID_"$cls"
    unset cls new_cls pos size existing_instances window_id tml tml_cls
}

close_window_workaround() {
    # If no argument passed, operate on active window
    active=$(active_window)
    [ -z "$1" ] && target=$active
    [ -n "$1" ] && target=$1
    xdotool windowminimize "$target"
    wmctrl -ic "$target"
    unset active target
}

move_window_to_preset() {
    case "$(active_dtop)" in
    0) # first workspace/layout
        case "$1" in
        1) x=37;   y=63;  w=627;  h=978 ;;
        2) x=703;  y=63;  w=1208; h=978 ;;
        3) x=1950; y=63;  w=571;  h=370 ;;
        4) x=1950; y=471; w=571;  h=226 ;;
        5) x=1950; y=735; w=571;  h=306 ;;
        esac
        ;;
    1) # second workspace/layout
        case "$1" in
        1) x=37;   y=63; w=1243; h=978 ;;
        2) x=1313; y=63; w=1208; h=978 ;;
        esac
        ;;
    2) # third workspace/layout
        case "$1" in
        1) x=37;   y=63;  w=1243; h=978 ;;
        3) x=1950; y=63;  w=571;  h=370 ;;
        4) x=1950; y=471; w=571;  h=226 ;;
        5) x=1950; y=735; w=571;  h=306 ;;
        esac
        ;;
    *) echo "Usage: move_window_to_preset 3"; exit
        ;;
    esac
    if [ -z "$2" ]; then
        target_window="active"
    else
        read -r target_window </tmp/tamwm/WID_"$2"
    fi
    position_window -x "$x" -y "$y" -w "$w" -h "$h" -i "$target_window"
    xdotool getactivewindow windowactivate
    unset x y w h
}

invert_windows() {
    # TODO: find how to concisely assign variables
    active=$(active_window)
    target=$(xdotool selectwindow)
    wbw=1 # wm border width

    ag() { # active window geometry
        xdotool getwindowgeometry "$active" |
        awk -F"[ x,]" 'BEGIN {RS="%"}{print $5" "$6" "$11" "$12 }' |
        awk -v i=$1 '{print $i}'
    }

    tg() { # target window geometry
        xdotool getwindowgeometry "$target" |
        awk -F"[ x,]" 'BEGIN {RS="%"}{print $5" "$6" "$11" "$12 }' |
        awk -v i=$1 '{print $i}'
    }

    ax=$(($(ag 1)-$wbw)); ay=$(($(ag 2)-$wbw)); aw=$(ag 3); ah=$(ag 4);
    tx=$(($(tg 1)-$wbw)); ty=$(($(tg 2)-$wbw)); tw=$(tg 3); th=$(tg 4);
    position_window -x "$tx" -y "$ty" -w "$tw" -h "$th" -i "$active"
    position_window -x "$ax" -y "$ay" -w "$aw" -h "$ah" -i "$target"

    unset active target
}

# ==== Desktop Management
manage_dtops() {
    case "$1" in
    dnext) instr="dnext";;
    dprev) instr="dprev";;
    dnum)  instr="dnum $2";;
    *) echo "Available -d argument: dnext, dprev, dnum n"; exit;;
    esac
    $instr "$@"
    unset instr
}

dnext() {
    destination=$(($(active_dtop)+1))
    [ "$(active_dtop)" = "$(last_dtop)" ] && destination=0
    switch_to_dtop "$destination"
    unset destination
}

dprev() {
    destination=$(($(active_dtop)-1))
    [ "$(active_dtop)" = 0 ] && destination=$(last_dtop)
    switch_to_dtop "$destination"
    unset destination
}

dnum() {
    switch_to_dtop "$1"
}



# ===== Helper functions ======================================================
# =============================================================================

# ==== Main block helpers
die() {
    printf '%s\n' "$1" >&2; exit 1
}

warn() {
    echo "$0:" "$@" >&2
}

check_prereqs() {
    has_command() { hash "$1" 2>/dev/null; }
    has_command wmctrl || die 'Error: Aborted. Please install wmctrl.'
    has_command xdotool || die 'Error: Aborted. Please install xdotool.'
}

# ==== Launch app helpers
count_cls() {
    wmctrl -lx | awk 'BEGIN {i=0} $3~"'"$1"'"{i++} END{print i}'
}

openbox_actions() {
    case $1 in
    to_bottom) xdotool key ctrl+alt+shift+super+1 ;;
    to_middle) xdotool key ctrl+alt+shift+super+2 ;;
    to_top)    xdotool key ctrl+alt+shift+super+3 ;;
    esac
}

position_window() {
    while getopts "i:x:y:w:h:" opt; do
        case "${opt}" in
        i) id="$OPTARG" ;;
        x) x="$OPTARG" ;;
        y) y="$OPTARG" ;;
        w) width="$OPTARG" ;;
        h) height="$OPTARG" ;;
        *) warn "invalid options (ixywh)";;
        esac
    done

    if [ "$id" = "active" ]; then
        id=$(active_window)
    fi

    if [ -n "$x" ] && [ -n "$y" ]; then
        xdotool windowmove "$id" "$x" "$y"
    fi

    if [ -n "$width" ] && [ -n "$height" ]; then
        xdotool windowsize "$id" "$width" "$height"
    fi

    unset id x y width height active
}

# ==== Desktop management helpers
active_dtop() {
    wmctrl -d | awk '/\*/ {print $1}'
}

last_dtop() {
    wmctrl -d | awk 'END {print $1}'
}

switch_to_dtop() {
    active=$(active_window)
    apply_layout "$1"
    wmctrl -s "$1"
    sleep .2
    xdotool windowfocus "$active"
    unset active
}

send_to_dtop() {
    unset pos size
    while getopts p: opt
    do
        case "$opt" in
        p) target_pos="$OPTARG" ;;
        *) ;;
        esac
    done
    shift $(( OPTIND - 1 ))

    [ -z "$target_layout" ] && target_layout=$(active_dtop)

    for cls in "$@"; do
        read -r window_id </tmp/tamwm/WID_"$cls"
        xdotool set_desktop_for_window "$window_id" "$target_layout"
        xdotool set_desktop_for_window "$window_id" "$target_layout"
        xdotool windowactivate "$window_id"
        xdotool windowactivate "$window_id"
        move_window_to_preset "$target_pos" "$1"
    done
}

apply_layout() {
    target_layout=$(active_dtop)
    [ -n "$1" ] && target_layout=$1

    case $target_layout in
        0)
        send_to_dtop -p "3" irc &
        send_to_dtop -p "4" ncmpcpp &
        send_to_dtop Yad &
        send_to_dtop -p "5" ranger &
        send_to_dtop -p "1" vim_one &
        send_to_dtop -p "2" vivaldi &
        ;;
        1)
        send_to_dtop -p "1" vim_two &
        send_to_dtop -p "2" vivaldi &
        ;;
        2)
        send_to_dtop -p "3" irc &
        send_to_dtop -p "4" ncmpcpp &
        send_to_dtop Yad &
        send_to_dtop -p "5" ranger &
        send_to_dtop -p "1" vim_two &
        ;;
    esac
    unset target_layout
}

active_window() {
    xprop -root _NET_ACTIVE_WINDOW | awk '{print "0x0"substr($5,3)}'
}

main "$@"
